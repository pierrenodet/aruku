"use strict";(self.webpackChunkaruku=self.webpackChunkaruku||[]).push([[487],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=a,g=f["".concat(u,".").concat(d)]||f[d]||p[d]||o;return t?r.createElement(g,i(i({ref:n},s),{},{components:t})):r.createElement(g,i({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5211:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={id:"configuration",title:"Configuration"},u=void 0,c={unversionedId:"configuration",id:"configuration",title:"Configuration",description:"Walker",source:"@site/../modules/aruku-docs/target/mdoc/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/aruku/docs/configuration",draft:!1,editUrl:"https://github.com/pierrenodet/aruku/edit/master/../modules/aruku-docs/target/mdoc/configuration.md",tags:[],version:"current",frontMatter:{id:"configuration",title:"Configuration"},sidebar:"someSidebar",previous:{title:"Walk Engine",permalink:"/aruku/docs/engine"},next:{title:"Transition Probability",permalink:"/aruku/docs/transition"}},s={},p=[{value:"Walker",id:"walker",level:2},{value:"Walker Configuration",id:"walker-configuration",level:2},{value:"Walker Engine Configuration",id:"walker-engine-configuration",level:2}],f={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"walker"},"Walker"),(0,o.kt)("p",null,"A walker is a simple scala case class that contains an id, a step count and a data :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="modules/aruku/Walker.scala"',title:'"modules/aruku/Walker.scala"'},"case class Walker[T](\n  id: Long,\n  step: Long,\n  data: T\n)\n")),(0,o.kt)("p",null,"But you can't make one by yourself, they are automatically generated by aruku thanks to the walker configuration."),(0,o.kt)("h2",{id:"walker-configuration"},"Walker Configuration"),(0,o.kt)("p",null,"The walker configuration defines how many walkers will be doing random walks, in how many epochs, how a walker is initialized, how it's updated and how it's affected to a vertice."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="modules/aruku/WalkerConfig.scala"',title:'"modules/aruku/WalkerConfig.scala"'},"case class WalkerConfig[T](\n  numWalkers: Long,\n  numEpochs: Int,\n  parallelism: Int,\n  init: VertexId => T,\n  update: (Walker[T], VertexId, Edge[Double]) => T,\n  start: StartingStrategy\n)\n")),(0,o.kt)("p",null,"It can be either constant, as the walker is not updated at every step. DeepWalk is one example of such a walker configuration :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="modules/aruku/WalkerConfig.scala"',title:'"modules/aruku/WalkerConfig.scala"'},"object WalkerConfig {\n\n  def constant[T](\n    numWalkers: Long,\n    numEpochs: Int,\n    parallelism: Int,\n    init: VertexId => T,\n    start: StartingStrategy\n  )\n\n}\n")),(0,o.kt)("p",null,"Or dynamic if we need to update the data of the walker at every step."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="modules/aruku/WalkerConfig.scala"',title:'"modules/aruku/WalkerConfig.scala"'},"object WalkerConfig {\n\n  def updating[T](\n    numWalkers: Long,\n    numEpochs: Int,\n    parallelism: Int,\n    init: VertexId => T,\n    update: (Walker[T], VertexId, Edge[Double]) => T,\n    start: StartingStrategy\n  ) \n\n}\n")),(0,o.kt)("h2",{id:"walker-engine-configuration"},"Walker Engine Configuration"),(0,o.kt)("p",null,"You can configure the engine itself at the moment with the ",(0,o.kt)("inlineCode",{parentName:"p"},'"spark.graphx.pregel.checkpointInterval"')," at the moment in order to break the lineage of the random walk if you are doing a lot of steps."))}d.isMDXComponent=!0}}]);