"use strict";(self.webpackChunkaruku=self.webpackChunkaruku||[]).push([[775],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return d}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),l=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):p(p({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(i.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||s[d]||o;return n?t.createElement(f,p(p({ref:r},u),{},{components:n})):t.createElement(f,p({ref:r},u))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=m;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,p[1]=c;for(var l=2;l<o;l++)p[l]=n[l];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8785:function(e,r,n){n.r(r),n.d(r,{assets:function(){return u},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),p=["components"],c={id:"example",title:"Example"},i=void 0,l={unversionedId:"example",id:"example",title:"Example",description:"Let's generate a graph with GraphX and run node2vec on it !",source:"@site/../modules/aruku-docs/target/mdoc/example.md",sourceDirName:".",slug:"/example",permalink:"/aruku/docs/example",draft:!1,editUrl:"https://github.com/pierrenodet/aruku/edit/master/../modules/aruku-docs/target/mdoc/example.md",tags:[],version:"current",frontMatter:{id:"example",title:"Example"},sidebar:"someSidebar",previous:{title:"Provided Walks",permalink:"/aruku/docs/walks"}},u={},s=[],m={toc:s};function d(e){var r=e.components,n=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,t.Z)({},m,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's generate a graph with GraphX and run node2vec on it !"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import aruku._\nimport aruku.walks._\nimport aruku.implicits._\nimport org.apache.spark._\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.util.GraphGenerators\n\nobject Main extends App {\n\n    //Start SparkContext\n    val sc = SparkContext.getOrCreate(\n      new SparkConf()\n        .setMaster("local[*]")\n        .setAppName("example")\n        .set("spark.graphx.pregel.checkpointInterval", "1")\n    )\n    sc.setCheckpointDir("checkpoint")\n\n    //Generate Graph\n    val numVertices = 150000\n    val graph: Graph[Long, Int] =\n      GraphGenerators\n        .logNormalGraph(sc, numVertices = numVertices)\n\n    //Node2Vec Configuration\n    val numWalkers = 150000\n    val walkLength = 80\n    val p          = 0.5\n    val q          = 2\n\n    //Execute Random Walk\n    val paths =\n      graph.randomWalk(edge => edge.attr.toDouble)\n    (Node2Vec.config(numWalkers), Node2Vec.transition(p, q, walkLength))\n\n    //Print 10 first Random Walks\n    paths.take(10).foreach { \n        case (walkerId, path) => println(walkerId, path.mkString(",")) \n    }\n\n}\n')))}d.isMDXComponent=!0}}]);