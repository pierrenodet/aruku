"use strict";(self.webpackChunkaruku=self.webpackChunkaruku||[]).push([[775],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return f}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function p(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):p(p({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(r),f=a,d=m["".concat(c,".").concat(f)]||m[f]||s[f]||o;return r?t.createElement(d,p(p({ref:n},u),{},{components:r})):t.createElement(d,p({ref:n},u))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var l=2;l<o;l++)p[l]=r[l];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8785:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),p=["components"],i={id:"example",title:"Example"},c=void 0,l={unversionedId:"example",id:"example",title:"Example",description:"Let's generate a graph with GraphX and run node2vec on it !",source:"@site/../modules/aruku-docs/target/mdoc/example.md",sourceDirName:".",slug:"/example",permalink:"/aruku/docs/example",draft:!1,editUrl:"https://github.com/pierrenodet/aruku/edit/main/modules/docs/example.md",tags:[],version:"current",frontMatter:{id:"example",title:"Example"},sidebar:"someSidebar",previous:{title:"Provided Walks",permalink:"/aruku/docs/walks"}},u={},s=[],m={toc:s};function f(e){var n=e.components,r=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's generate a graph with GraphX and run node2vec on it !"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import aruku._\nimport aruku.walks._\nimport aruku.implicits._\nimport org.apache.spark._\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.util.GraphGenerators\n\nobject Main extends App {\n\n    //Start SparkContext\n    val sc = SparkContext.getOrCreate(\n      new SparkConf()\n        .setMaster("local[*]")\n        .setAppName("example")\n        .set("spark.graphx.pregel.checkpointInterval", "1")\n    )\n    sc.setCheckpointDir("checkpoint")\n\n    //Generate Graph\n    val numVertices = 150000\n    val graph: Graph[Long, Int] =\n      GraphGenerators\n        .logNormalGraph(sc, numVertices = numVertices)\n\n    //Node2Vec Configuration\n    val numWalkers = 150000\n    val walkLength = 80\n    val p          = 0.5\n    val q          = 2\n\n    //Execute Random Walk\n    val paths =\n      graph.randomWalk(edge => edge.attr.toDouble)(Node2Vec.config(numWalkers), Node2Vec.transition(p, q, walkLength))\n\n    //Print 10 first Random Walks\n    paths.take(10).foreach { \n        case (walkerId, path) => println(walkerId, path.mkString(",")) \n    }\n\n}\n')))}f.isMDXComponent=!0}}]);