"use strict";(self.webpackChunkaruku=self.webpackChunkaruku||[]).push([[361],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7415:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return s}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],u={id:"overview",title:"Overview"},l=void 0,c={unversionedId:"overview",id:"overview",title:"Overview",description:"What's aruku ?",source:"@site/../modules/aruku-docs/target/mdoc/overview.md",sourceDirName:".",slug:"/overview",permalink:"/aruku/docs/overview",draft:!1,editUrl:"https://github.com/pierrenodet/aruku/edit/master/../modules/aruku-docs/target/mdoc/overview.md",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"someSidebar",next:{title:"Walk Engine",permalink:"/aruku/docs/engine"}},p={},s=[{value:"What&#39;s aruku ?",id:"whats-aruku-",level:2},{value:"How do I use it ?",id:"how-do-i-use-it-",level:2},{value:"Ready to install ?",id:"ready-to-install-",level:2},{value:"Acknowledgement",id:"acknowledgement",level:2}],d={toc:s};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"whats-aruku-"},"What's aruku ?"),(0,o.kt)("p",null,"aruku is a random walk engine for Apache Spark. It's helps you program and model you random walk easily and let's a distributed, fault tolerant and optimized engine take care of running it. "),(0,o.kt)("h2",{id:"how-do-i-use-it-"},"How do I use it ?"),(0,o.kt)("p",null,"To run node2vec on a graph from Apache Spark Graphx :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import aruku._\nimport aruku.implicits._\nimport aruku.walks._\n\nval graph: Graph[Long, Int] = GraphGenerators\n    .logNormalGraph(sc, numVertices = 150000)\n\nval numWalkers = 150000\nval walkLength = 80\nval p          = 0.5\nval q          = 2\n\ngraph.randomWalk(edge => edge.attr.toDouble)\n    (Node2Vec.config(150000), Node2Vec.transition(0.5, 2, 80))\n")),(0,o.kt)("h2",{id:"ready-to-install-"},"Ready to install ?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "com.github.pierrenodet" %% "aruku-core" % "0.0.3"\n')),(0,o.kt)("h2",{id:"acknowledgement"},"Acknowledgement"),(0,o.kt)("p",null,"This library is inspired by KnightKing [",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KnightKingWalk/KnightKing"},"engine"),"] and the [",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=lyVZNZZUdOk&t=1473s"},"talk"),"] of Min Shen at Spark Summit 2017."))}m.isMDXComponent=!0}}]);